Problem Statement 4 (AGGREGATION & INDEXING USING MONGODB) 
Create the Collection Student_Data( Student _ID,  Student _Name, Department, Marks )and solve the
 following: 
1. Display all Students based on their departments along with an average Marks of a particular
 department. 
2. Displays the number of Students associated along with a particular department. 
3. Display list of Students with the highest Marks in each Department in descending order 
of Marks. 
4. Create an index on field Student_ID. 
5. Create an index on fields “Student_Name‘ and “Department”. 
6. Drop an index on field Student_ID. 
7. Drop an index on fields “Student_Name‘ and “Department”.


1. Creating the Student_Data Collection and Inserting Data

db.Student_Data.insertMany([
    { Student_ID: 1, Student_Name: "Alice", Department: "CS", Marks: 85 },
    { Student_ID: 2, Student_Name: "Bob", Department: "IT", Marks: 70 },
    { Student_ID: 3, Student_Name: "Charlie", Department: "CS", Marks: 90 },
    { Student_ID: 4, Student_Name: "David", Department: "IT", Marks: 65 },
    { Student_ID: 5, Student_Name: "Eva", Department: "EC", Marks: 88 },
    { Student_ID: 6, Student_Name: "Frank", Department: "CS", Marks: 75 },
    { Student_ID: 7, Student_Name: "Grace", Department: "EC", Marks: 95 }
]);

2. Queries
Query 1: Display all Students based on their departments along with the average Marks of each department

db.Student_Data.aggregate([
    {
        $group: {
            _id: "$Department",
            Students: { $push: { Student_Name: "$Student_Name", Marks: "$Marks" } },
            Average_Marks: { $avg: "$Marks" }
        }
    },
    {
        $project: {
            Department: "$_id",
            Students: 1,
            Average_Marks: 1,
            _id: 0
        }
    }
]);

Query 2: Display the number of Students associated with each department.

db.Student_Data.aggregate([
    {
        $group: {
            _id: "$Department",
            Student_Count: { $sum: 1 }
        }
    },
    {
        $project: {
            Department: "$_id",
            Student_Count: 1,
            _id: 0
        }
    }
]);

Query 3: Display list of Students with the highest Marks in each Department in descending order of Marks.

db.Student_Data.aggregate([
    {
        $sort: { Department: 1, Marks: -1 }
    },
    {
        $group: {
            _id: "$Department",
            Top_Student: { $first: "$Student_Name" },
            Highest_Marks: { $first: "$Marks" }
        }
    },
    {
        $sort: { Highest_Marks: -1 }
    }
]);

3. Indexing
Query 4: Create an index on the Student_ID field

db.Student_Data.createIndex({ Student_ID: 1 });

Query 5: Create an index on the fields Student_Name and Department.

db.Student_Data.createIndex({ Student_Name: 1, Department: 1 });

Query 6: Drop the index on the Student_ID field.

db.Student_Data.dropIndex({ Student_ID: 1 });

Query 7: Drop the index on the fields Student_Name and Department.

db.Student_Data.dropIndex({ Student_Name: 1, Department: 1 });

