Problem Statement 13 (Map Reduce) 
Create collection for Student{roll_no, name, class, dept, aggregate_marks}. Write Map Reduce Functions for
 following requirements. 
1. Finding the total marks of students of “TE” class department-wise. 
2. Finding the highest marks of students of “SE” class department-wise. 
3. Find Average marks of students of “BE” class department-wise. 

use universityDB;  // Switch to the appropriate database

db.Student.insertMany([
  { "roll_no": "S1", "name": "John", "class": "TE", "dept": "CS", "aggregate_marks": 85 },
  { "roll_no": "S2", "name": "Jane", "class": "SE", "dept": "IT", "aggregate_marks": 75 },
  { "roll_no": "S3", "name": "Jake", "class": "BE", "dept": "CS", "aggregate_marks": 90 },
  { "roll_no": "S4", "name": "Alice", "class": "TE", "dept": "IT", "aggregate_marks": 80 },
  { "roll_no": "S5", "name": "Bob", "class": "SE", "dept": "CS", "aggregate_marks": 95 },
  { "roll_no": "S6", "name": "Eve", "class": "BE", "dept": "IT", "aggregate_marks": 70 },
  { "roll_no": "S7", "name": "Charlie", "class": "TE", "dept": "CS", "aggregate_marks": 88 },
  { "roll_no": "S8", "name": "David", "class": "SE", "dept": "IT", "aggregate_marks": 85 },
  { "roll_no": "S9", "name": "Mallory", "class": "BE", "dept": "CS", "aggregate_marks": 80 },
  { "roll_no": "S10", "name": "Trent", "class": "TE", "dept": "CS", "aggregate_marks": 92 }
]);

1.var map1 = function() {
  if (this.class === "TE") {
    emit(this.dept, this.aggregate_marks);  // Emit department as the key and aggregate marks as the value
  }
};

var reduce1 = function(key, values) {
  return Array.sum(values);  // Sum the marks for each department
};

// Run the MapReduce query
db.Student.mapReduce(map1, reduce1, { out: { inline: 1 } });


2.var map2 = function() {
  if (this.class === "SE") {
    emit(this.dept, this.aggregate_marks);  // Emit department as the key and aggregate marks as the value
  }
};

var reduce2 = function(key, values) {
  return Math.max(...values);  // Find the highest marks for each department
};

// Run the MapReduce query
db.Student.mapReduce(map2, reduce2, { out: { inline: 1 } });

3.var map3 = function() {
  if (this.class === "BE") {
    emit(this.dept, { totalMarks: this.aggregate_marks, count: 1 }); // Emit department with marks and count 1
  }
};

var reduce3 = function(key, values) {
  var totalMarks = 0;
  var count = 0;

  // Sum the total marks and count the students
  values.forEach(function(value) {
    totalMarks += value.totalMarks;
    count += value.count;
  });

  // Calculate the average marks
  return { averageMarks: totalMarks / count };
};

// Run the MapReduce query
db.Student.mapReduce(map3, reduce3, { out: { inline: 1 } });