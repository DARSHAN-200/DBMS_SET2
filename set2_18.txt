Problem Statement 18 (Procedures / Functions) 
Consider following schema for Bank database.  
Account(Account_No, Cust_Name, Balance, NoOfYears)  
Earned_Interest(Account_No, Interest_Amt)  
1. Write a PL/SQL procedure for following requirement. Take as input Account_No and Interest Rate from User.
 Calculate the Interest_Amt as simple interest for the given Account_No and store it in Earned_Interest table.
 Display all the details of Earned_Interest Table. 
2. Write a PLSQL function to display all records from Account table having Balance greater than 50,000. 


Step 1: Create the Tables

CREATE TABLE Account (
    Account_No INT PRIMARY KEY,
    Cust_Name VARCHAR(50),
    Balance DECIMAL(15, 2),
    NoOfYears INT
);

CREATE TABLE Earned_Interest (
    Account_No INT,
    Interest_Amt DECIMAL(15, 2),
    FOREIGN KEY (Account_No) REFERENCES Account(Account_No)
);


Task 1: Procedure to Calculate Interest and Store in Earned_Interest
This procedure will take Account_No and Interest_Rate as inputs, calculate the interest as simple interest using the formula Interest = Principal * Rate * Time / 100, and insert the result into the Earned_Interest table. Finally, it will display all records in the Earned_Interest table

DELIMITER //

CREATE PROCEDURE CalculateAndStoreInterest(
    IN p_Account_No INT,
    IN p_Interest_Rate DECIMAL(5, 2)
)
BEGIN
    DECLARE v_Balance DECIMAL(15, 2);
    DECLARE v_NoOfYears INT;
    DECLARE v_Interest_Amt DECIMAL(15, 2);

    -- Fetch Balance and NoOfYears for the given Account_No
    SELECT Balance, NoOfYears INTO v_Balance, v_NoOfYears
    FROM Account
    WHERE Account_No = p_Account_No;

    -- Calculate simple interest
    SET v_Interest_Amt = (v_Balance * p_Interest_Rate * v_NoOfYears) / 100;

    -- Insert calculated interest into Earned_Interest table
    INSERT INTO Earned_Interest (Account_No, Interest_Amt)
    VALUES (p_Account_No, v_Interest_Amt);

    -- Display all records in the Earned_Interest table
    SELECT * FROM Earned_Interest;
END //

DELIMITER ;



CALL CalculateAndStoreInterest(12345, 5.5);



Task 2: Function to Display Accounts with Balance Greater Than 50,000
This function will return all records from the Account table where the Balance is greater than 50,000.


DELIMITER //

CREATE FUNCTION GetHighBalanceAccounts()
RETURNS TABLE (
    Account_No INT,
    Cust_Name VARCHAR(50),
    Balance DECIMAL(15, 2),
    NoOfYears INT
)
BEGIN
    RETURN
    SELECT Account_No, Cust_Name, Balance, NoOfYears
    FROM Account
    WHERE Balance > 50000;
END //

DELIMITER ;




Alternatively, if your SQL environment doesnâ€™t support RETURN TABLE, you can use a stored procedure to display the records:

DELIMITER //

CREATE PROCEDURE ShowHighBalanceAccounts()
BEGIN
    SELECT Account_No, Cust_Name, Balance, NoOfYears
    FROM Account
    WHERE Balance > 50000;
END //

DELIMITER ;
CALL ShowHighBalanceAccounts();
