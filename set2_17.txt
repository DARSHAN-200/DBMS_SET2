Problem Statement 17 (JOINS & SUBQUERIES USING MYSQL) 
Consider Following Schema 
Employee (Employee_id, First_name, Last_name , Hire_date, Salary, Job_title, Manager_id, department_id)
 Departments(Department_id, Department_name, Manager_id, Location_id) 
Locations(Location_id , Street_address , Postal_code, city, state, Country_id) 
Manager(Manager_id, Manager_name) 
Create the tables with referential integrity.Solve following queries using joins and subqueries. 
1. Write a query to find the names (first_name, last_name), the salary of the employees who earn more than
 the average salary and who works in any of the IT departments. 
2. Write a query to find the names (first_name, last_name), the salary of the employees who earn the same
 salary as the minimum salary for all departments. 
3. Write a query to display the employee ID, first name, last names, salary of all employees whose salary is
 above average for their departments. 
4. Write a query to display the department name, manager name, and city. 
5. Write a query to display the name (first_name, last_name), hire date, salary of all managers whose
 experience is more than 15 years. 



Step 1: Create Tables with Referential IntegrityCREATE TABLE Employee (
    Employee_id INT PRIMARY KEY,
    First_name VARCHAR(50),
    Last_name VARCHAR(50),
    Hire_date DATE,
    Salary DECIMAL(10, 2),
    Job_title VARCHAR(50),
    Manager_id INT,
    Department_id INT,
    FOREIGN KEY (Manager_id) REFERENCES Manager(Manager_id),
    FOREIGN KEY (Department_id) REFERENCES Departments(Department_id)
);

CREATE TABLE Departments (
    Department_id INT PRIMARY KEY,
    Department_name VARCHAR(50),
    Manager_id INT,
    Location_id INT,
    FOREIGN KEY (Manager_id) REFERENCES Manager(Manager_id),
    FOREIGN KEY (Location_id) REFERENCES Locations(Location_id)
);

CREATE TABLE Locations (
    Location_id INT PRIMARY KEY,
    Street_address VARCHAR(100),
    Postal_code VARCHAR(20),
    City VARCHAR(50),
    State VARCHAR(50),
    Country_id VARCHAR(5)
);

CREATE TABLE Manager (
    Manager_id INT PRIMARY KEY,
    Manager_name VARCHAR(50)
);



Queries
Query 1: Employees Earning More Than Average Salary in IT Departments

SELECT E.First_name, E.Last_name, E.Salary
FROM Employee E
JOIN Departments D ON E.Department_id = D.Department_id
WHERE E.Salary > (SELECT AVG(Salary) FROM Employee)
AND D.Department_name LIKE '%IT%';


Query 2: Employees Earning the Same as the Minimum Salary in All Departments

SELECT E.First_name, E.Last_name, E.Salary
FROM Employee E
WHERE E.Salary = (SELECT MIN(Salary) FROM Employee);


Query 3: Employees with Above-Average Salary for Their Departments

SELECT E.Employee_id, E.First_name, E.Last_name, E.Salary
FROM Employee E
JOIN Departments D ON E.Department_id = D.Department_id
WHERE E.Salary > (
    SELECT AVG(E2.Salary)
    FROM Employee E2
    WHERE E2.Department_id = E.Department_id
);


Query 4: Department Name, Manager Name, and City

SELECT D.Department_name, M.Manager_name, L.City
FROM Departments D
JOIN Manager M ON D.Manager_id = M.Manager_id
JOIN Locations L ON D.Location_id = L.Location_id;


Query 5: Managers with More Than 15 Years of Experience

SELECT E.First_name, E.Last_name, E.Hire_date, E.Salary
FROM Employee E
JOIN Manager M ON E.Employee_id = M.Manager_id
WHERE TIMESTAMPDIFF(YEAR, E.Hire_date, CURDATE()) > 15;
